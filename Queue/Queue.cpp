#include <queue>
#include <iostream>

// std::queue - является адаптером контейнера, который предоставляет интерфейс для работы с очередью (FIFO — First In, First Out).
// Он использует другие контейнеры в качестве базы для хранения элементов и предоставляет ограниченный набор операций.

// Вставка элемента: O(1) Добавление элемента в конец очереди выполняется за константное время. push()
// Удаление элемента: O(1) Удаление элемента с начала очереди также выполняется за константное время. pop()
// Доступ к элементу в начале очереди: O(1) Получение элемента из начала очереди происходит за константное время. front()
// Доступ к элементу в конце очереди: O(1) Получение элемента из конца очереди также выполняется за константное время. back()

// Queue не предоставляет доступ к элементам, не находящимся в начала или конец очереди

int main()
{
    std::queue<int> queue_1;

    // Вставка элементов
    queue_1.push(1);
    queue_1.push(2);
    queue_1.push(3);

    // Доступ к элементу в начале очереди и удаление
    std::cout << "First element: " << queue_1.front() << std::endl; // Выведет 1
    queue_1.pop(); // Удаляем первый элемент

    // Вставка нового элемента
    queue_1.push(4);

    // Вывод содержимого очереди
    std::cout << "Queue size: " << queue_1.size() << std::endl; // Выведет 3 (добавили один элемент)
    std::cout << "Queue: ";
    while (!queue_1.empty()) {
        std::cout << queue_1.front() << " "; // Выведет 2 3 4 (по порядку добавления)
        queue_1.pop();
    }
    std::cout << std::endl << std::endl;

	// Чтобы использовать queue как адаптер для другого контейнера, нужно передать тип контейнра вторым параметром

    std::queue<int, std::deque<int>> q;

    q.push(1);
    q.push(2);
    q.push(3);

    std::cout << "First elemet: " << q.front() << std::endl; // Выведет 1
    q.pop(); // Удаляем первый элемент

    q.push(4);

    std::cout << "Queue size: " << q.size() << std::endl; // Выведет 3
    std::cout << "Queue: ";
    while (!q.empty()) {
        std::cout << q.front() << " "; // Выведет 2 3 4
        q.pop();
    }
    std::cout << std::endl;
	
	return 0;
}